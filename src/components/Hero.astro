---
export interface Props {
  heading: string;
  backgroundImage?: string;
  overlay?: number;
  fullHeight?: boolean;
  centered?: boolean;
}

const { 
  heading, 
  backgroundImage = '/images/ocean-hero.jpg',
  overlay = 0.45,
  fullHeight = true,
  centered = true
} = Astro.props;
---

<section 
  class={`hero ${fullHeight ? 'hero--full' : ''} ${centered ? 'hero--centered' : ''}`}
  style={`--overlay-opacity: ${overlay};`}
>
  {backgroundImage && (
    <div class="hero__background">
      <img src={backgroundImage} alt="" loading="eager" />
    </div>
  )}
  
  <div class="hero__content container">
    <h1>{heading}</h1>
    <slot />
  </div>
  
  {fullHeight && (
    <div class="hero__scroll-hint">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M12 5v14M5 12l7 7 7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </div>
  )}
</section>

<style>
  .hero {
    position: relative;
    min-height: 50vh;
    display: flex;
    align-items: center;
    color: white;
    overflow: hidden;
  }
  
  .hero--full {
    min-height: 100vh;
  }
  
  .hero--centered {
    justify-content: center;
    text-align: center;
  }
  
  .hero__background {
    position: absolute;
    inset: 0;
    z-index: -1;
  }
  
  .hero__background img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  .hero__background::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to bottom,
      rgba(11, 13, 16, var(--overlay-opacity)),
      rgba(11, 13, 16, calc(var(--overlay-opacity) * 0.7))
    );
  }
  
  .hero__content {
    position: relative;
    z-index: 1;
    padding: var(--space-xl) var(--space-lg);
    max-width: 1000px;
  }
  
  .hero__content h1 {
    font-weight: 300;
    line-height: 1.3;
    margin-bottom: var(--space-lg);
    animation: fadeInUp 1s ease;
  }
  
  .hero__scroll-hint {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    opacity: 0.6;
    animation: bounce 2s infinite;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateX(-50%) translateY(0);
    }
    40% {
      transform: translateX(-50%) translateY(-10px);
    }
    60% {
      transform: translateX(-50%) translateY(-5px);
    }
  }
</style>